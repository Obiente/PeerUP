---
import Badge from './Badge.astro';
import Button from './Button.astro';
import Icon from './Icon.astro';

interface Props {
  alert: {
    id: string;
    type: 'down' | 'slow' | 'recovered' | 'network';
    monitor: string;
    message: string;
    timestamp: string;
    severity: 'high' | 'medium' | 'low';
    acknowledged: boolean;
  };
  className?: string;
}

const { alert, className = '' } = Astro.props;

const getAlertBg = (type: string) => {
  switch (type) {
    case 'down': return 'border-status-error/30 bg-status-error/5';
    case 'slow': return 'border-status-warning/30 bg-status-warning/5';
    case 'recovered': return 'border-status-online/30 bg-status-online/5';
    case 'network': return 'border-accent-primary/30 bg-accent-primary/5';
    default: return 'border-border-subtle bg-surface-secondary';
  }
};

const getAlertColor = (type: string) => {
  switch (type) {
    case 'down': return 'text-status-error';
    case 'slow': return 'text-status-warning';
    case 'recovered': return 'text-status-online';
    case 'network': return 'text-accent-primary';
    default: return 'text-secondary';
  }
};

const getAlertIcon = (type: string) => {
  switch (type) {
    case 'down': return 'heroicons:exclamation-triangle';
    case 'slow': return 'heroicons:clock';
    case 'recovered': return 'heroicons:check-circle';
    case 'network': return 'heroicons:wifi';
    default: return 'heroicons:information-circle';
  }
};

const getAlertVariant = (type: string) => {
  switch (type) {
    case 'down': return 'error' as const;
    case 'slow': return 'warning' as const;
    case 'recovered': return 'success' as const;
    case 'network': return 'info' as const;
    default: return 'neutral' as const;
  }
};
---

<div class={`border rounded-lg p-4 ${getAlertBg(alert.type)} ${alert.acknowledged ? 'opacity-60' : ''} ${className}`}>
  <div class="flex items-start gap-3">
    <div class={`flex-shrink-0 ${getAlertColor(alert.type)}`}>
      <Icon name={getAlertIcon(alert.type)} size="md" />
    </div>
    <div class="flex-1 min-w-0">
      <div class="flex items-center gap-2 mb-1">
        <h4 class="text-primary font-medium">{alert.monitor}</h4>
        <Badge variant={getAlertVariant(alert.type)} size="sm">
          {alert.type.toUpperCase()}
        </Badge>
        {alert.severity === 'high' && (
          <Badge variant="error" size="sm">
            HIGH
          </Badge>
        )}
      </div>
      <p class="text-tertiary text-sm mb-2">{alert.message}</p>
      <div class="flex items-center justify-between">
        <span class="text-tertiary text-xs">{alert.timestamp}</span>
        {!alert.acknowledged && (
          <Button variant="secondary" size="sm">
            Acknowledge
          </Button>
        )}
      </div>
    </div>
  </div>
</div>
